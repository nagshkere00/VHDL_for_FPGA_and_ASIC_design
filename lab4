library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity fsm_temp_ctl is
  Port (
    clk             : in std_logic;
    areset          : in std_logic;

    current_temp    : in std_logic_vector(6 downto 0);
    desired_temp    : in std_logic_vector(6 downto 0);
    display_select  : in std_logic;

    cool            : in std_logic;
    ac_ready        : in std_logic;
    heat            : in std_logic;
    furnace_hot     : in std_logic;

    temp_display    : out std_logic_vector(6 downto 0);
    a_c_on          : out std_logic;
    furnace_on      : out std_logic;
    fan_on          : out std_logic
  );
end fsm_temp_ctl;

architecture rtl of fsm_temp_ctl is    

type STATE_TYPE is (STATE_IDLE, STATE_HEAT_ON, STATE_FURNACE_HOT, STATE_FURNACE_COOL, STATE_COOL_ON, STATE_AC_READY, STATE_AC_DONE);
signal state               : STATE_TYPE;

signal current_temp_reg    : std_logic_vector(6 downto 0);
signal desired_temp_reg    : std_logic_vector(6 downto 0);
signal display_select_reg  : std_logic;
signal cool_reg            : std_logic;
signal heat_reg            : std_logic;
signal ac_ready_reg        : std_logic;
signal furnace_hot_reg     : std_logic;

begin

    -- registering inputs
    REG_INPUT : process(clk, areset)
    begin
        if (areset = '1') then
            current_temp_reg    <= (others => '0');
            desired_temp_reg    <= (others => '0');
            display_select_reg  <= '0';
            cool_reg            <= '0';
            heat_reg            <= '0';
            ac_ready_reg        <= '0';
            furnace_hot_reg     <= '0';
        elsif (clk'event and clk = '1') then
            current_temp_reg    <= current_temp;
            desired_temp_reg    <= desired_temp;
            display_select_reg  <= display_select;
            cool_reg            <= cool;
            heat_reg            <= heat;
            ac_ready_reg        <= ac_ready;
            furnace_hot_reg     <= furnace_hot;
        end if;
    end process REG_INPUT;

    -- temp ctl FSM

    FSM : process(clk, areset)
    begin
        if (areset = '1') then
            state               <= STATE_IDLE;
        elsif (clk'event and clk = '1') then
            case state is
                when STATE_IDLE =>
                    if (heat_reg = '1') and (desired_temp_reg > current_temp_reg) then
                        state   <= STATE_HEAT_ON;
                    elsif (cool_reg = '1') and (desired_temp_reg < current_temp_reg) then
                        state   <= STATE_COOL_ON;
                    end if;

                -- heat path
                when STATE_HEAT_ON =>
                    if furnace_hot_reg = '1' then
                        state   <= STATE_FURNACE_HOT;
                    end if;
                when STATE_FURNACE_HOT =>
                    if (heat_reg = '0') or (desired_temp_reg <= current_temp_reg) then
                        state   <= STATE_FURNACE_COOL;
                    end if;
                when STATE_FURNACE_COOL =>
                    if furnace_hot_reg = '0' then
                        state   <= STATE_IDLE;
                    end if;

                -- cool path
                when STATE_COOL_ON =>
                    if ac_ready_reg = '1' then
                        state   <= STATE_AC_READY;
                    end if;
                when STATE_AC_READY =>
                    if (cool_reg = '0') or (desired_temp_reg >= current_temp_reg) then
                        state   <= STATE_AC_DONE;
                    end if;
                when STATE_AC_DONE =>
                    if ac_ready_reg = '0' then
                        state   <= STATE_IDLE;
                    end if;

                when others =>
                    state       <= STATE_IDLE;
            end case;
        end if;
    end process FSM;
    
    DISPMUX : process(clk, areset)    
    begin
        if (areset = '1') then
            temp_display <= (others => '0');
        elsif (clk'event and clk = '1') then
            if (display_select_reg = '1') then
                temp_display <= current_temp_reg;
            else
                temp_display <= desired_temp_reg;
            end if;
        end if;
    end process DISPMUX;
    
    AC_CTL : process(clk, areset)
    begin
        if (areset = '1') then
            a_c_on <= '0';
        elsif (clk'event and clk = '1') then
            case state is 
                when STATE_COOL_ON | STATE_AC_READY =>
                    a_c_on <= '1';
                when others =>
                    a_c_on <= '0';
            end case;
        end if;
    end process AC_CTL;
    
    FURNACE_CTL : process(clk, areset)    
    begin
        if (areset = '1') then
            furnace_on <= '0';
        elsif (clk'event and clk = '1') then
            case state is 
                when STATE_HEAT_ON | STATE_FURNACE_HOT =>
                    furnace_on <= '1';
                when others =>
                    furnace_on <= '0';
            end case;
        end if;
    end process FURNACE_CTL;

    FAN_CTL : process(clk, areset)    
    begin
        if (areset = '1') then
            fan_on <= '0';
        elsif (clk'event and clk = '1') then
            case state is 
                when STATE_FURNACE_HOT | STATE_FURNACE_COOL | STATE_AC_READY | STATE_AC_DONE =>
                    fan_on <= '1';
                when others =>
                    fan_on <= '0';
            end case;
        end if;
    end process FAN_CTL;

end rtl;



Updated testbench is as follows,

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity tb_temp_ctl is
--  Port ( );
end tb_temp_ctl;

architecture test_behav of tb_temp_ctl is

component fsm_temp_ctl is
  Port (
    clk             : in std_logic;
    areset          : in std_logic;

    current_temp    : in std_logic_vector(6 downto 0);
    desired_temp    : in std_logic_vector(6 downto 0);
    display_select  : in std_logic;

    cool            : in std_logic;
    ac_ready        : in std_logic;
    heat            : in std_logic;
    furnace_hot     : in std_logic;

    temp_display    : out std_logic_vector(6 downto 0);
    a_c_on          : out std_logic;
    furnace_on      : out std_logic;
    fan_on          : out std_logic
  );
end component;

signal clk             : std_logic := '1';
signal areset          : std_logic;
signal current_temp    : std_logic_vector(6 downto 0);
signal desired_temp    : std_logic_vector(6 downto 0);
signal display_select  : std_logic;
signal cool            : std_logic;
signal heat            : std_logic;
signal temp_display    : std_logic_vector(6 downto 0);
signal a_c_on          : std_logic;
signal furnace_on      : std_logic;
signal ac_ready        : std_logic;
signal furnace_hot     : std_logic;
signal fan_on          : std_logic;

begin

    clk <= not clk after 5 ns;

    areset <= '1', '0' after 20 ns;

    UUT: fsm_temp_ctl port map (
      clk             => clk,
      areset          => areset,
      current_temp    => current_temp,
      desired_temp    => desired_temp,
      display_select  => display_select,
      cool            => cool,
      heat            => heat,
      ac_ready        => ac_ready,
      furnace_hot     => furnace_hot,
      temp_display    => temp_display,
      a_c_on          => a_c_on,
      furnace_on      => furnace_on,
      fan_on          => fan_on  
    );  

    TEST: process
    begin
      current_temp    <= "0000000";
      desired_temp    <= "0000000";
      display_select  <= '0';
      cool            <= '0';
      heat            <= '0';
      ac_ready        <= '0';
      furnace_hot     <= '0';
      wait for 40 ns;

      -- test display select
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      display_select  <= '0';
      wait for 40 ns;
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      display_select  <= '1';
      wait for 40 ns;

      wait for 40 ns;

      -- test AC
      -- cool off
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      cool            <= '0';
      wait for 40 ns;
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      cool            <= '1';
      wait for 40 ns;
      ac_ready        <= '1';
      wait for 40 ns;
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      cool            <= '0';
      wait for 40 ns;
      ac_ready        <= '0';
      wait for 40 ns;

      wait for 40 ns;

      -- temp reached
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      cool            <= '0';
      wait for 40 ns;
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      cool            <= '1';
      wait for 40 ns;
      ac_ready        <= '1';
      wait for 40 ns;
      current_temp    <= "0001111";
      desired_temp    <= "1110000";
      cool            <= '1';
      wait for 40 ns;
      ac_ready        <= '0';
      wait for 40 ns;
      cool            <= '0';
      wait for 40 ns;

      wait for 40 ns;      
      wait for 40 ns;

      -- test Furnace
      -- heat off
      current_temp    <= "0001111";
      desired_temp    <= "1110000";
      heat            <= '0';
      wait for 40 ns;
      current_temp    <= "0001111";
      desired_temp    <= "1110000";
      heat            <= '1';
      wait for 40 ns;
      furnace_hot     <= '1';
      wait for 40 ns;
      current_temp    <= "0001111";
      desired_temp    <= "1110000";
      heat            <= '0';
      wait for 40 ns;
      furnace_hot     <= '0';
      wait for 40 ns;

      wait for 40 ns;

      -- temp reached
      current_temp    <= "0001111";
      desired_temp    <= "1110000";
      heat            <= '0';
      wait for 40 ns;
      current_temp    <= "0001111";
      desired_temp    <= "1110000";
      heat            <= '1';
      wait for 40 ns;
      furnace_hot     <= '1';
      wait for 40 ns;
      current_temp    <= "1110000";
      desired_temp    <= "0001111";
      heat            <= '1';
      wait for 40 ns;
      furnace_hot     <= '0';
      wait for 40 ns;
      heat            <= '0';
      wait for 40 ns;
      
      wait for 40 ns;
      wait for 40 ns;

    end process TEST;
    
end test_behav;
